Problem Statement:

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:
Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]



Solution:
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        i=0
        j=0
        while i<=m+n:
            try:
                if nums1[i]<=nums2[j]:
                    if i>=m+j:
                        nums1.insert(i,nums2[j])
                        nums1.pop()
                        i+=1
                        j+=1
                    else:
                        i+=1
                elif nums2[j]<nums1[i]:
                    nums1.insert(i,nums2[j])
                    nums1.pop()
                    j+=1
                    i+=1
            except:
                break

        ######### Faster using three pointers 
        
        # have one pointer at m i.e end of nums1 elements
        p1=m-1
        
        # have one pointer at n i.e end of nums2 elements
        p2=n-1
        
        # one pointer to fill blank spaces
        temp=m+n-1
        
        while p1>=0 and p2>=0:
            
            # if the current pointer element at nums1 is less than nums2 pointer, add nums2 element at blank space pointer and decrement p2 and temp
            if nums1[p1]<=nums2[p2]:
                nums1[temp]=nums2[p2]
                p2-=1
                temp-=1
                
            # else place nums1 element at blank space pointer and decrement p1 and temp
            else:
                nums1[temp]=nums1[p1]
                temp-=1
                p1-=1
        
        # check if elements are remaining from nums1 or nums2
        while p1>=0:
            nums1[temp]=nums1[p1]
            temp-=1
            p1-=1
        
        while p2>=0:
            nums1[temp]=nums2[p2]
            temp-=1
            p2-=1
         
             
